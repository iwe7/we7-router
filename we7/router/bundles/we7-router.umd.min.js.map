{
  "version": 3,
  "file": "we7-router.umd.min.js",
  "sources": [
    "ng://we7-router/node_modules/tslib/tslib.es6.js",
    "ng://we7-router/out/collection.ts",
    "ng://we7-router/out/common.ts",
    "ng://we7-router/out/url-parser.ts",
    "ng://we7-router/out/url_tree_mobile.ts",
    "ng://we7-router/out/url_tree_web.ts",
    "ng://we7-router/out/we7-router.module.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "import { NgModuleFactory, ɵisObservable as isObservable, ɵisPromise as isPromise } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { fromPromise } from 'rxjs/observable/fromPromise';\nimport { of } from 'rxjs/observable/of';\nimport { concatAll } from 'rxjs/operator/concatAll';\nimport { every } from 'rxjs/operator/every';\nimport * as l from 'rxjs/operator/last';\nimport { map } from 'rxjs/operator/map';\nimport { mergeAll } from 'rxjs/operator/mergeAll';\nimport { PRIMARY_OUTLET } from '@angular/router';\n\nexport function shallowEqualArrays(a: any[], b: any[]): boolean {\n    if (a.length !== b.length) return false;\n    for (let i = 0; i < a.length; ++i) {\n        if (!shallowEqual(a[i], b[i])) return false;\n    }\n    return true;\n}\n\nexport function shallowEqual(a: { [x: string]: any }, b: { [x: string]: any }): boolean {\n    const k1 = Object.keys(a);\n    const k2 = Object.keys(b);\n    if (k1.length != k2.length) {\n        return false;\n    }\n    let key: string;\n    for (let i = 0; i < k1.length; i++) {\n        key = k1[i];\n        if (a[key] !== b[key]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function flatten<T>(arr: T[][]): T[] {\n    return Array.prototype.concat.apply([], arr);\n}\n\nexport function last<T>(a: T[]): T | null {\n    return a.length > 0 ? a[a.length - 1] : null;\n}\n\nexport function and(bools: boolean[]): boolean {\n    return !bools.some(v => !v);\n}\n\nexport function forEach<K, V>(map: { [key: string]: V }, callback: (v: V, k: string) => void): void {\n    for (const prop in map) {\n        if (map.hasOwnProperty(prop)) {\n            callback(map[prop], prop);\n        }\n    }\n}\n\nexport function waitForMap<A, B>(\n    obj: { [k: string]: A }, fn: (k: string, a: A) => Observable<B>): Observable<{ [k: string]: B }> {\n    if (Object.keys(obj).length === 0) {\n        return of({});\n    }\n\n    const waitHead: Observable<B>[] = [];\n    const waitTail: Observable<B>[] = [];\n    const res: { [k: string]: B } = {};\n\n    forEach(obj, (a: A, k: string) => {\n        const mapped = map.call(fn(k, a), (r: B) => res[k] = r);\n        if (k === PRIMARY_OUTLET) {\n            waitHead.push(mapped);\n        } else {\n            waitTail.push(mapped);\n        }\n    });\n\n    const concat$ = concatAll.call(of(...waitHead, ...waitTail));\n    const last$ = l.last.call(concat$);\n    return map.call(last$, () => res);\n}\n\nexport function andObservables(observables: Observable<Observable<any>>): Observable<boolean> {\n    const merged$ = mergeAll.call(observables);\n    return every.call(merged$, (result: any) => result === true);\n}\n\nexport function wrapIntoObservable<T>(value: T | NgModuleFactory<T> | Promise<T> | Observable<T>):\n    Observable<T> {\n    if (isObservable(value)) {\n        return value;\n    }\n\n    if (isPromise(value)) {\n        return fromPromise(Promise.resolve(value));\n    }\n\n    return of(value as T);\n}\n",
    "import { UrlSegmentGroup, UrlSegment, PRIMARY_OUTLET, ParamMap, convertToParamMap, DefaultUrlSerializer, UrlTree } from '@angular/router';\nimport { forEach, shallowEqual } from './collection';\n\n\nexport function serializeMobilePaths(segment: UrlSegmentGroup): string {\n    let i = getQueryParams('i');\n    let m = getQueryParams('m');\n    let str = `app/index.php?i=${i ? i : '2'}&c=entry&m=${m ? m : 'imeepos_runner'}`;\n    if (segment.segments.length > 0) {\n        console.log(segment.segments);\n        let p = segment.segments[segment.segments.length - 1];\n        str += '&do=' + p.path;\n    }\n    return str;\n}\n\nexport function serializeWebPaths(segment: UrlSegmentGroup): string {\n    let m = getQueryParams('m');\n    let i = getQueryParams('i');\n    let str = `web/index.php?c=site&a=entry&i=${i ? i : '2'}&m=${m ? m : 'imeepos_runner'}`;\n    if (segment.segments.length > 0) {\n        console.log(segment.segments);\n        let p = segment.segments[segment.segments.length - 1];\n        str += '&do=' + p.path;\n    }\n    return str;\n}\n\nfunction getQueryParams(name: string) {\n    let url = parseURL();\n    return url[name];\n}\n\nexport function parseURL(): { [k: string]: string } {\n    const ret = {};\n    const seg = location.search.replace(/^\\?/, '').split('&').filter(function (v, i) {\n        if (v !== '' && v.indexOf('=')) {\n            return true;\n        }\n    });\n    seg.forEach((element, index) => {\n        const idx = element.indexOf('=');\n        const key = element.substring(0, idx);\n        const val = element.substring(idx + 1);\n        ret[key] = val;\n    });\n    return ret;\n}\n\nexport function encodeUriQuery(s: string): string {\n    return encodeUriString(s).replace(/%3B/gi, ';');\n}\n\nexport function encodeUriSegment(s: string): string {\n    return encodeUriString(s).replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/%26/gi, '&');\n}\n\nexport function decode(s: string): string {\n    return decodeURIComponent(s);\n}\n\nexport function decodeQuery(s: string): string {\n    return decode(s.replace(/\\+/g, '%20'));\n}\n\nexport function serializePath(path: UrlSegment): string {\n    return `${encodeUriSegment(path.path)}${serializeMatrixParams(path.parameters)}`;\n}\n\nfunction encodeUriString(s: string): string {\n    return encodeURIComponent(s)\n        .replace(/%40/g, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/g, '$')\n        .replace(/%2C/gi, ',');\n}\n\nfunction serializeMatrixParams(params: { [key: string]: string }): string {\n    return Object.keys(params)\n        .map(key => `;${encodeUriSegment(key)}=${encodeUriSegment(params[key])}`)\n        .join('');\n}\n\nexport function equalSegments(as: UrlSegment[], bs: UrlSegment[]): boolean {\n    return equalPath(as, bs) && as.every((a, i) => shallowEqual(a.parameters, bs[i].parameters));\n}\n\nexport function equalPath(as: UrlSegment[], bs: UrlSegment[]): boolean {\n    if (as.length !== bs.length) return false;\n    return as.every((a, i) => a.path === bs[i].path);\n}\n\nexport function mapChildrenIntoArray<T>(\n    segment: UrlSegmentGroup, fn: (v: UrlSegmentGroup, k: string) => T[]): T[] {\n    let res: T[] = [];\n    forEach(segment.children, (child: UrlSegmentGroup, childOutlet: string) => {\n        if (childOutlet === PRIMARY_OUTLET) {\n            res = res.concat(fn(child, childOutlet));\n        }\n    });\n    forEach(segment.children, (child: UrlSegmentGroup, childOutlet: string) => {\n        if (childOutlet !== PRIMARY_OUTLET) {\n            res = res.concat(fn(child, childOutlet));\n        }\n    });\n    return res;\n}\n\nexport function equalQueryParams(\n    container: { [k: string]: string }, containee: { [k: string]: string }): boolean {\n    return shallowEqual(container, containee);\n}\n\nexport function equalSegmentGroups(container: UrlSegmentGroup, containee: UrlSegmentGroup): boolean {\n    if (!equalPath(container.segments, containee.segments)) return false;\n    if (container.numberOfChildren !== containee.numberOfChildren) return false;\n    for (const c in containee.children) {\n        if (!container.children[c]) return false;\n        if (!equalSegmentGroups(container.children[c], containee.children[c])) return false;\n    }\n    return true;\n}\n\nexport function containsQueryParams(\n    container: { [k: string]: string }, containee: { [k: string]: string }): boolean {\n    return Object.keys(containee).length <= Object.keys(container).length &&\n        Object.keys(containee).every(key => containee[key] === container[key]);\n}\n\nexport function containsSegmentGroup(container: UrlSegmentGroup, containee: UrlSegmentGroup): boolean {\n    return containsSegmentGroupHelper(container, containee, containee.segments);\n}\n\nexport function containsSegmentGroupHelper(\n    container: UrlSegmentGroup, containee: UrlSegmentGroup, containeePaths: UrlSegment[]): boolean {\n    if (container.segments.length > containeePaths.length) {\n        const current = container.segments.slice(0, containeePaths.length);\n        if (!equalPath(current, containeePaths)) return false;\n        if (containee.hasChildren()) return false;\n        return true;\n\n    } else if (container.segments.length === containeePaths.length) {\n        if (!equalPath(container.segments, containeePaths)) return false;\n        for (const c in containee.children) {\n            if (!container.children[c]) return false;\n            if (!containsSegmentGroup(container.children[c], containee.children[c])) return false;\n        }\n        return true;\n\n    } else {\n        const current = containeePaths.slice(0, container.segments.length);\n        const next = containeePaths.slice(container.segments.length);\n        if (!equalPath(container.segments, current)) return false;\n        if (!container.children[PRIMARY_OUTLET]) return false;\n        return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);\n    }\n}\n\nconst SEGMENT_RE = /^[^\\/()?;=&#]+/;\nexport function matchSegments(str: string): string {\n    const match = str.match(SEGMENT_RE);\n    return match ? match[0] : '';\n}\n\nconst QUERY_PARAM_RE = /^[^=?&#]+/;\nexport function matchQueryParams(str: string): string {\n    const match = str.match(QUERY_PARAM_RE);\n    return match ? match[0] : '';\n}\n\nconst QUERY_PARAM_VALUE_RE = /^[^?&#]+/;\nexport function matchUrlQueryParamValue(str: string): string {\n    const match = str.match(QUERY_PARAM_VALUE_RE);\n    return match ? match[0] : '';\n}\n\n\nexport function serializeSegment(segment: UrlSegmentGroup, root: boolean, fn: Function): string {\n    if (!segment.hasChildren()) {\n        return fn(segment);\n    }\n    if (root) {\n        const primary = segment.children[PRIMARY_OUTLET] ?\n            serializeSegment(segment.children[PRIMARY_OUTLET], false, fn) : '';\n        const children: string[] = [];\n        forEach(segment.children, (v: UrlSegmentGroup, k: string) => {\n            if (k !== PRIMARY_OUTLET) {\n                children.push(`${k}:${serializeSegment(v, false, fn)}`);\n            }\n        });\n        return children.length > 0 ? `${primary}(${children.join('//')})` : primary;\n    } else {\n        const children = mapChildrenIntoArray(segment, (v: UrlSegmentGroup, k: string) => {\n            if (k === PRIMARY_OUTLET) {\n                return [serializeSegment(segment.children[PRIMARY_OUTLET], false, fn)];\n            }\n            return [`${k}:${serializeSegment(v, false, fn)}`];\n        });\n        let str = `${fn(segment)}/(${children.join('//')})`;\n        return str;\n    }\n}\n\n\nexport function serializeQueryParams(params: { [key: string]: any }): string {\n    const strParams: string[] = Object.keys(params).map((name) => {\n        const value = params[name];\n        return Array.isArray(value) ?\n            value.map(v => `${encodeUriQuery(name)}=${encodeUriQuery(v)}`).join('&') :\n            `${encodeUriQuery(name)}=${encodeUriQuery(value)}`;\n    });\n\n    return strParams.length ? `&${strParams.join(\"&\")}` : '';\n}\n\n\nexport function containsTree(container: UrlTree, containee: UrlTree, exact: boolean): boolean {\n    if (exact) {\n        return equalQueryParams(container.queryParams, containee.queryParams) &&\n            equalSegmentGroups(container.root, containee.root);\n    }\n    return containsQueryParams(container.queryParams, containee.queryParams) &&\n        containsSegmentGroup(container.root, containee.root);\n}\n",
    "\n\nimport { UrlSegmentGroup, UrlSegment, PRIMARY_OUTLET } from '@angular/router';\nimport {\n    matchSegments, decode, matchQueryParams, matchUrlQueryParamValue,\n    decodeQuery\n} from './common';\nexport class UrlParser {\n    private remaining: string;\n    constructor(private url: string) { this.remaining = url; }\n    parseRootSegment(): UrlSegmentGroup {\n        this.consumeOptional('/');\n        if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {\n            return new UrlSegmentGroup([], {});\n        }\n        return new UrlSegmentGroup([], this.parseChildren());\n    }\n\n    parseQueryParams(): { [key: string]: any } {\n        const params: { [key: string]: any } = {};\n        if (this.consumeOptional('?')) {\n            do {\n                this.parseQueryParam(params);\n            } while (this.consumeOptional('&'));\n        }\n        return params;\n    }\n\n    parseFragment(): string | null {\n        return this.consumeOptional('#') ? decodeURIComponent(this.remaining) : null;\n    }\n    num: number = 0;\n    private parseChildren(): { [outlet: string]: UrlSegmentGroup } {\n        if (this.remaining === '') {\n            return {};\n        }\n        this.consumeOptional('/');\n        let segments: UrlSegment[] = [];\n        if (!this.peekStartsWith('(')) {\n            segments.push(this.parseSegment());\n        }\n        while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n            this.capture('/');\n            segments.push(this.parseSegment());\n        }\n        let children: { [outlet: string]: UrlSegmentGroup } = {};\n        if (this.peekStartsWith('/(')) {\n            this.capture('/');\n            children = this.parseParens(true);\n        }\n        let res: { [outlet: string]: UrlSegmentGroup } = {};\n        if (this.peekStartsWith('(')) {\n            res = this.parseParens(false);\n        }\n        let params = this.parseQueryParams();\n        // 如果有do=*** 添加一个segments\n        if (params.do) {\n            segments.push(new UrlSegment(params.do, {}));\n        }\n        // // 如果长度大于1 取最后一个\n        if (segments.length > 1) {\n            segments = [segments[segments.length - 1]];\n        }\n        if (segments.length > 0 || Object.keys(children).length > 0) {\n            res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);\n        }\n        return res;\n    }\n    private parseSegment(): UrlSegment {\n        const path = matchSegments(this.remaining);\n        if (path === '' && this.peekStartsWith(';')) {\n            throw new Error(`Empty path url segment cannot have parameters: '${this.remaining}'.`);\n        }\n        this.capture(path);\n        return new UrlSegment(decode(path), this.parseMatrixParams());\n    }\n\n    private parseMatrixParams(): { [key: string]: any } {\n        const params: { [key: string]: any } = {};\n        while (this.consumeOptional(';')) {\n            this.parseParam(params);\n        }\n        return params;\n    }\n\n    private parseParam(params: { [key: string]: any }): void {\n        const key = matchSegments(this.remaining);\n        if (!key) {\n            return;\n        }\n        this.capture(key);\n        let value: any = '';\n        if (this.consumeOptional('=')) {\n            const valueMatch = matchSegments(this.remaining);\n            if (valueMatch) {\n                value = valueMatch;\n                this.capture(value);\n            }\n        }\n        params[decode(key)] = decode(value);\n    }\n\n    private parseQueryParam(params: { [key: string]: any }): void {\n        const key = matchQueryParams(this.remaining);\n        if (!key) {\n            return;\n        }\n        this.capture(key);\n        let value: any = '';\n        if (this.consumeOptional('=')) {\n            const valueMatch = matchUrlQueryParamValue(this.remaining);\n            if (valueMatch) {\n                value = valueMatch;\n                this.capture(value);\n            }\n        }\n        const decodedKey = decodeQuery(key);\n        const decodedVal = decodeQuery(value);\n        if (params.hasOwnProperty(decodedKey)) {\n            let currentVal = params[decodedKey];\n            if (!Array.isArray(currentVal)) {\n                currentVal = [currentVal];\n                params[decodedKey] = currentVal;\n            }\n            currentVal.push(decodedVal);\n        } else {\n            params[decodedKey] = decodedVal;\n        }\n    }\n\n    private parseParens(allowPrimary: boolean): { [outlet: string]: UrlSegmentGroup } {\n        const segments: { [key: string]: UrlSegmentGroup } = {};\n        this.capture('(');\n\n        while (!this.consumeOptional(')') && this.remaining.length > 0) {\n            const path = matchSegments(this.remaining);\n            const next = this.remaining[path.length];\n            if (next !== '/' && next !== ')' && next !== ';') {\n                throw new Error(`Cannot parse url '${this.url}'`);\n            }\n            let outletName: string = undefined!;\n            if (path.indexOf(':') > -1) {\n                outletName = path.substr(0, path.indexOf(':'));\n                this.capture(outletName);\n                this.capture(':');\n            } else if (allowPrimary) {\n                outletName = PRIMARY_OUTLET;\n            }\n            const children = this.parseChildren();\n            segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :\n                new UrlSegmentGroup([], children);\n            this.consumeOptional('//');\n        }\n        return segments;\n    }\n\n    private peekStartsWith(str: string): boolean {\n        return this.remaining.startsWith(str);\n    }\n\n    private consumeOptional(str: string): boolean {\n        if (this.peekStartsWith(str)) {\n            this.remaining = this.remaining.substring(str.length);\n            return true;\n        }\n        return false;\n    }\n\n    private capture(str: string): void {\n        if (!this.consumeOptional(str)) {\n            throw new Error(`Expected \"${str}\".`);\n        }\n    }\n}\n",
    "import { PRIMARY_OUTLET, ParamMap, convertToParamMap, UrlSegmentGroup, UrlSegment, UrlTree, UrlSerializer } from '@angular/router';\nimport { forEach, shallowEqual } from './collection';\nimport { serializePath } from './common';\nimport {\n    serializeWebPaths,\n    serializeMobilePaths,\n    mapChildrenIntoArray,\n    equalQueryParams,\n    equalSegmentGroups,\n    containsQueryParams,\n    containsSegmentGroup,\n    matchSegments,\n    matchQueryParams,\n    decode,\n    decodeQuery,\n    matchUrlQueryParamValue,\n    serializeSegment,\n    serializeQueryParams\n} from './common';\nimport { encodeUriQuery } from './common';\nimport { UrlParser } from './url-parser';\n\nexport class MobileUrlSerializer implements UrlSerializer {\n    parse(url: string): MobileUrlTree {\n        const p = new UrlParser(url);\n        let urlTree = new MobileUrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n        return urlTree;\n    }\n    serialize(tree: MobileUrlTree): string {\n        const segment = `/${serializeSegment(tree.root, true, serializeMobilePaths)}`;\n        const query = serializeQueryParams(tree.queryParams);\n        const fragment = typeof tree.fragment === `string` ? `#${encodeUriQuery(tree.fragment!)}` : '';\n        let str = `${segment}${query}${fragment}`;\n        return str;\n    }\n}\n\nconst MOBILE_SERIALIZER = new MobileUrlSerializer();\n\nexport class MobileUrlTree extends UrlTree {\n    _queryParamMap: ParamMap;\n    constructor(\n        root: UrlSegmentGroup,\n        queryParams: { [key: string]: string },\n        fragment: string | null\n    ) {\n        super();\n        this.root = root;\n        this.queryParams = queryParams;\n        this.fragment = fragment;\n    }\n    get queryParamMap(): ParamMap {\n        if (!this._queryParamMap) {\n            this._queryParamMap = convertToParamMap(this.queryParams);\n        }\n        return this._queryParamMap;\n    }\n    toString(): string { return MOBILE_SERIALIZER.serialize(this); }\n}\n",
    "import { PRIMARY_OUTLET, ParamMap, convertToParamMap, UrlSegmentGroup, UrlSegment, UrlTree, UrlSerializer } from '@angular/router';\nimport { forEach, shallowEqual } from './collection';\nimport { serializePath } from './common';\nimport {\n    serializeMobilePaths,\n    serializeWebPaths,\n    mapChildrenIntoArray,\n    equalQueryParams,\n    equalSegmentGroups,\n    containsQueryParams,\n    containsSegmentGroup,\n    matchSegments,\n    matchQueryParams,\n    decode,\n    decodeQuery,\n    matchUrlQueryParamValue,\n    serializeSegment,\n    serializeQueryParams\n} from './common';\nimport { encodeUriQuery } from './common';\nimport { UrlParser } from './url-parser';\n\nexport class WebUrlSerializer implements UrlSerializer {\n    parse(url: string): WebUrlTree {\n        const p = new UrlParser(url);\n        let urlTree = new WebUrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n        return urlTree;\n    }\n    serialize(tree: WebUrlTree): string {\n        const segment = `/${serializeSegment(tree.root, true, serializeWebPaths)}`;\n        const query = serializeQueryParams(tree.queryParams);\n        const fragment = typeof tree.fragment === `string` ? `#${encodeUriQuery(tree.fragment!)}` : '';\n        let str = `${segment}${query}${fragment}`;\n        return str;\n    }\n}\n\nconst WEB_SERIALIZER = new WebUrlSerializer();\n\nexport class WebUrlTree extends UrlTree {\n    _queryParamMap: ParamMap;\n    constructor(\n        root: UrlSegmentGroup,\n        queryParams: { [key: string]: string },\n        fragment: string | null\n    ) {\n        super();\n        this.root = root;\n        this.queryParams = queryParams;\n        this.fragment = fragment;\n    }\n    get queryParamMap(): ParamMap {\n        if (!this._queryParamMap) {\n            this._queryParamMap = convertToParamMap(this.queryParams);\n        }\n        return this._queryParamMap;\n    }\n    toString(): string { return WEB_SERIALIZER.serialize(this); }\n}\n",
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { UrlSerializer } from '@angular/router';\nimport { MobileUrlSerializer } from './url_tree_mobile';\nimport { WebUrlSerializer } from './url_tree_web';\n\n@NgModule({})\nexport class We7MobileRouterModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: We7MobileRouterModule,\n            providers: [\n                {\n                    provide: UrlSerializer,\n                    useClass: MobileUrlSerializer\n                }\n            ]\n        }\n    }\n}\n\n@NgModule({})\nexport class We7WebRouterModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: We7WebRouterModule,\n            providers: [\n                {\n                    provide: UrlSerializer,\n                    useClass: WebUrlSerializer\n                }\n            ]\n        }\n    }\n}\n\n"
  ],
  "names": [
    "extendStatics",
    "Object",
    "setPrototypeOf",
    "__proto__",
    "Array",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__extends",
    "__",
    "this",
    "constructor",
    "prototype",
    "create",
    "forEach",
    "map",
    "callback",
    "prop",
    "serializeMobilePaths",
    "segment",
    "i",
    "getQueryParams",
    "m",
    "str",
    "segments",
    "length",
    "console",
    "log",
    "path",
    "serializeWebPaths",
    "name",
    "ret",
    "location",
    "search",
    "replace",
    "split",
    "filter",
    "v",
    "indexOf",
    "element",
    "index",
    "idx",
    "key",
    "substring",
    "val",
    "encodeUriQuery",
    "s",
    "encodeURIComponent",
    "decode",
    "decodeURIComponent",
    "decodeQuery",
    "SEGMENT_RE",
    "matchSegments",
    "match",
    "QUERY_PARAM_RE",
    "QUERY_PARAM_VALUE_RE",
    "serializeSegment",
    "root",
    "fn",
    "hasChildren",
    "primary",
    "children",
    "PRIMARY_OUTLET",
    "children_1",
    "k",
    "push",
    "join",
    "res",
    "child",
    "childOutlet",
    "concat",
    "serializeQueryParams",
    "params",
    "strParams",
    "keys",
    "value",
    "isArray",
    "UrlParser",
    "url",
    "num",
    "remaining",
    "parseRootSegment",
    "consumeOptional",
    "peekStartsWith",
    "UrlSegmentGroup",
    "parseChildren",
    "parseQueryParams",
    "parseQueryParam",
    "parseFragment",
    "parseSegment",
    "capture",
    "parseParens",
    "UrlSegment",
    "Error",
    "parseMatrixParams",
    "parseParam",
    "valueMatch",
    "decodedKey",
    "decodedVal",
    "currentVal",
    "allowPrimary",
    "next",
    "outletName",
    "substr",
    "startsWith",
    "MobileUrlSerializer",
    "parse",
    "MobileUrlTree",
    "serialize",
    "tree",
    "queryParams",
    "fragment",
    "MOBILE_SERIALIZER",
    "_super",
    "_this",
    "call",
    "tslib_1.__extends",
    "defineProperty",
    "get",
    "_queryParamMap",
    "convertToParamMap",
    "toString",
    "UrlTree",
    "WebUrlSerializer",
    "WebUrlTree",
    "WEB_SERIALIZER",
    "We7MobileRouterModule",
    "forRoot",
    "ngModule",
    "providers",
    "provide",
    "UrlSerializer",
    "useClass",
    "type",
    "NgModule",
    "args",
    "We7WebRouterModule"
  ],
  "mappings": "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"
}
